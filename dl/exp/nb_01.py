
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dl/01_matmul.ipynb

from exp.nb_00 import *
import operator

def test(a, b, cmp, cname='None'):
    if cname is None:
        cname = cmp.__name__
    assert cmp(a,b), f'{cname}:\n{a}\n{b}'

def test_eq(a,b):
    test(a,b,operator.eq,'==')

from pathlib import Path
from IPython.core.debugger import set_trace
import pickle, gzip, math, matplotlib as mpl
import matplotlib.pyplot as plt
import os
import torch
from torch import tensor
import requests

def url2name(url):
    return url.split('/')[-1]

def datapath4file(filename, ext:str='.tgz'):
    "Return data path to `filename`"
    local_path = Path.cwd()/'data'/filename
    return local_path

def _url2tgz(url, ext='.tgz'):
    return datapath4file(f'{url2name(url)}{ext}', ext=ext)

def download_url(url:str, dest:str, overwrite:bool=False, pbar=None,
                 show_progress=False, chunk_size=1024*1024, timeout=4, retries=5)->None:
    "Download `url` to `dest` unless it exists and not `overwrite`."
    if os.path.exists(dest) and not overwrite: return

    s = requests.Session()
    s.mount('http://',requests.adapters.HTTPAdapter(max_retries=retries))
    u = s.get(url, stream=True, timeout=timeout)
    try: file_size = int(u.headers["Content-Length"])
    except: show_progress = False

    with open(dest, 'wb') as f:
        nbytes = 0
        if show_progress: pbar = progress_bar(range(file_size), auto_update=False, leave=False, parent=pbar)
        try:
            for chunk in u.iter_content(chunk_size=chunk_size):
                nbytes += len(chunk)
                if show_progress: pbar.update(nbytes)
                f.write(chunk)
        except requests.exceptions.ConnectionError as e:
            fname = url.split('/')[-1]
            data_dir = f'{Path(dest).parent}'
            timeout_txt =(f'\n Download of {url} has failed after {retries} retries\n'
                          f' Fix the download manually:\n'
                          f'$ mkdir -p {data_dir}\n'
                          f'$ cd {data_dir}\n'
                          f'$ wget -c {url}\n'
                          f'$ tar -zxvf {fname}\n\n'
                          f'And re-run your code once the download is successful\n')
            print(timeout_txt)
            import sys;sys.exit(1)

def download_data(url:str, fname=None, ext='.tgz'):
    "Download `url` to destination `fname`."
    fname = Path(_url2tgz(url, ext=ext))
    os.makedirs(fname.parent, exist_ok=True)
    if not fname.exists():
        print(f'Downloading {url}')
        download_url(f'{url}{ext}', fname)
    return fname

MNIST_URL = 'http://deeplearning.net/data/mnist/mnist.pkl'

def near(a,b):
    return torch.allclose(a, b, rtol=1e-3, atol=1e-5)

def test_near(a,b):
    test(a,b,near)